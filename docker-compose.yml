version: '3.9'

x-service-environments: &appServiceEnvironments
  CONFIG_SERVER_URI: 'http://${CONFIG_SERVER_CONTAINER_NAME}:${CONFIG_SERVER_PORT}/'
  EUREKA_SERVER_URI: "http://${EUREKA_SERVER_CONTAINER_NAME}:${EUREKA_SERVER_PORT}/eureka"
  MONGODB_HOST: ${MONGO_CONTAINER_NAME}
  KAFKA_BROKERCONNECT: ${KAFKA_SERVER_CONTAINER_NAME}:29092
  SCHEMA_REGISTRY_LISTENERS: http://${SCHEMA_REGISTRY_CONTAINER_NAME}:8081
  DATA_DIRECTORY: /appdata
  TZ: "${CURRENT_TIMEZONE}"
  spring_profiles_active: 'docker'

services:

  config-server:
    build: ./config-server
    container_name: ${CONFIG_SERVER_CONTAINER_NAME}
    ports:
      - "${CONFIG_SERVER_PORT}:${CONFIG_SERVER_PORT}"
    environment:
      << : *appServiceEnvironments
      PORT: "${CONFIG_SERVER_PORT}"
      GIT_CONFIG_STORE_URL: "http://${GITEA_SERVER_CONTAINER_NAME}:3000/demoadmin/demo-school-config-store.git"
    volumes:
      - ${DATA_DIRECTORY}:/appdata:consistent

  eureka-server:
    build: ./eureka-server
    container_name: ${EUREKA_SERVER_CONTAINER_NAME}
    ports:
      - "${EUREKA_SERVER_PORT}:${EUREKA_SERVER_PORT}"
    environment:
      << : *appServiceEnvironments
      PORT: ${EUREKA_SERVER_PORT}
    volumes:
      - ${DATA_DIRECTORY}:/appdata:consistent

  cloud-gateway:
    build: ./cloud-gateway
    container_name: ${GATEWAY_SERVER_CONTAINER_NAME}
    ports:
      - "${GATEWAY_SERVER_PORT}:${GATEWAY_SERVER_PORT}"
    environment:
      << : *appServiceEnvironments
      PORT: ${GATEWAY_SERVER_PORT}
    volumes:
      - ${DATA_DIRECTORY}:/appdata:consistent

  teacher-service:
    build: ./teacher-service
    container_name: ${TEACHER_SERVICE_CONTAINER_NAME}
    ports:
      - "${TEACHER_SERVICE_PORT}:${TEACHER_SERVICE_PORT}"
    environment:
      << : *appServiceEnvironments
    volumes:
      - ${DATA_DIRECTORY}:/appdata:consistent

  teacher-service-multi:
    build: ./teacher-service
    environment:
      << : *appServiceEnvironments
    volumes:
      - ${DATA_DIRECTORY}:/appdata:consistent
    deploy:
      mode: replicated
      replicas: 2
    profiles:
      - full

  school-service:
    build: ./school-service
    container_name: ${SCHOOL_SERVICE_CONTAINER_NAME}
    ports:
      - "${SCHOOL_SERVICE_PORT}:${SCHOOL_SERVICE_PORT}"
    environment:
      << : *appServiceEnvironments
    volumes:
      - ${DATA_DIRECTORY}:/appdata:consistent

  payment-service:
    build: ./payment-service
    container_name: ${PAYMENT_SERVICE_CONTAINER_NAME}
    ports:
      - "${PAYMENT_SERVICE_PORT}:${PAYMENT_SERVICE_PORT}"
    environment:
      <<: *appServiceEnvironments
      MONGODB_PORT: 27017
    volumes:
      - ${DATA_DIRECTORY}:/appdata:consistent

  gitea-server:
    build: ./gitea-server
    container_name: ${GITEA_SERVER_CONTAINER_NAME}
    volumes:
      - ./${DATA_DIRECTORY}/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "${GITEA_SERVER_PORT}:3000"
      - "${GITEA_SERVER_PORT_SSH}:8302" # Setup of gitea is done with 8302 as ssh
    profiles:
      - full

  jenkins-server:
    build: ./jenkins-server
    container_name: ${JENKINS_SERVER_CONTAINER_NAME}
    ports:
      - "${JENKINS_SERVER_PORT}:8080"
      - "${JENKINS_SERVER_PORT2}:5000"
    environment:
      - "Duser.timezone=${CURRENT_TIMEZONE}"
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - "./${DATA_DIRECTORY}/jenkins:/var/jenkins_home"
      - "/var/run/docker.sock:/var/run/docker.sock"
    profiles:
      - full

  zookeeper-server:
    image: zookeeper
    restart: "no"
    container_name: ${ZOOKEEPER_SERVER_CONTAINER_NAME}
    hostname: ${ZOOKEEPER_SERVER_CONTAINER_NAME}
    ports:
      - ${ZOOKEEPER_SERVER_PORT}:2181
    environment:
      ZOO_MY_ID: 1
      # ZOO_SERVERS: server.1=zookeeper:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181

  kafka-server:
    build: ./kafka-server
    depends_on:
      - zookeeper-server
    ports:
      - ${KAFKA_SERVER_PORT}:9092
    restart: "no"
    container_name: ${KAFKA_SERVER_CONTAINER_NAME}
    hostname: ${KAFKA_SERVER_CONTAINER_NAME}
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://${KAFKA_SERVER_CONTAINER_NAME}:29092,OUTSIDE://localhost:${KAFKA_SERVER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-server:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE

  kafdrop-server:
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - kafka-server
    container_name: ${KAFDROP_SERVER_CONTAINER_NAME}
    ports:
      - ${KAFDROP_SERVER_PORT}:9000
    environment:
      - KAFKA_BROKERCONNECT=kafka-server:29092
    profiles:
      - full
      - monitor

  schema-registry:
    image: confluentinc/cp-schema-registry:7.1.0
    hostname: ${SCHEMA_REGISTRY_CONTAINER_NAME}
    container_name: ${SCHEMA_REGISTRY_CONTAINER_NAME}
    depends_on:
      - kafka-server
    ports:
      - "${SCHEMA_REGISTRY_PORT}:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: ${SCHEMA_REGISTRY_CONTAINER_NAME}
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "${KAFKA_SERVER_CONTAINER_NAME}:29092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: ${ELASTIC_CONTAINER_NAME}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - ./${DATA_DIRECTORY}/elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "${ELASTIC_PORT}:9200"
      - "${ELASTIC_PORT2}:9300"
    environment:
      ES_JAVA_OPTS: -Xmx256m -Xms256m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    profiles:
      - full
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: ${LOGSTASH_CONTAINER_NAME}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - ${DATA_DIRECTORY}:/appdata:consistent,ro
    ports:
      - "${LOGSTASH_PORT}:5044"
      - "${LOGSTASH_PORT2}:5000/tcp"
      - "${LOGSTASH_PORT2}:5000/udp"
      - "${LOGSTASH_PORT3}:9600"
    environment:
      LS_JAVA_OPTS: -Xmx256m -Xms256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    profiles:
      - full
      - elk

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: ${KIBANA_CONTAINER_NAME}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    profiles:
      - full
      - elk

  mongo:
    image: mongo
    container_name: ${MONGO_CONTAINER_NAME}
#    volumes:
#      - ./${DATA_DIRECTORY}/mongo:/data/db
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_ROOT_PASSWORD}"
    ports:
      - "${MONGO_PORT}:27017"

  mongo-express:
    image: mongo-express
    container_name: ${MONGO_EXPRESS_CONTAINER_NAME}
    restart: "no"
    ports:
      - ${MONGO_EXPRESS_PORT}:8081
    environment:
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_SERVER: ${MONGO_CONTAINER_NAME}
    profiles:
      - full

  axon-server:
    image: axoniq/axonserver
    container_name: ${AXON_SERVER_CONTAINER_NAME}
    ports:
      - ${AXON_SERVER_PORT}:8024
      - ${AXON_SERVER_PORT2}:8124

  demo-helper:
    build: ./demo-helper
    container_name: ${DEMO_HELPER_CONTAINER_NAME}
    environment:
      GITEA_HOST: ${GITEA_SERVER_CONTAINER_NAME}
      GITEA_ADMIN_USERNAME: demoadmin
      GITEA_ADMIN_PASSWORD: "demo#123"
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/root
      - ./demo-helper/scripts:/scripts            # TODO: Temporary code
      - $HOME/.m2:/root/.m2                       # Using host's maven directory
      - $HOME/.gradle:/root/.gradle               # Using host's gradle directory
      - ${DATA_DIRECTORY}/demohelper/state:/scripts/state

